/*
*  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
*
*  WSO2 Inc. licenses this file to you under the Apache License,
*  Version 2.0 (the "License"); you may not use this file except
*  in compliance with the License.
*  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

@Library('wso2-jenkins-shared-lib')
import org.wso2.util.Constants

//Nodes
def NODE_MASTER = "master"
node(NODE_MASTER) {
    //Stacks
    def STACK_STAGING = "staging-stack"
    def STACK_PROD = "prod-stack"
    //Constants
    def WUM_CREDS = 'wum_creds'
    def AWS_CREDS = 'aws_creds'
    def BASE_IMAGE = "ami-04e245635a03bf935"
    //Test Endpoint
    def TEST_ENDPOINT_KEY = "ESBHttpUrl"
    //Directories
    def DEPLOYMENT_DIR = "deployment"
    def CONF_HOME_DIR = "configs"
    def ARTIFACTS_DIR = "cicd-test-artifacts"
    def PIPELINE_RESOURCES_DIR = "resources"
    def IMAGE_RESOURCES = "image-resources"
    def PUPPET_CONF_DIR = "${WORKSPACE}/${CONF_HOME_DIR}"
    def ARTIFACT_LOC = "${WORKSPACE}/${ARTIFACTS_DIR}/artifacts"
    def IMAGE_RESOURCES_LOC = "${WORKSPACE}/${IMAGE_RESOURCES}/"
    def RESOURCES = Constants.Paths.RESOURCES
    def PACKER_RESOURCES = "${WORKSPACE}/${PIPELINE_RESOURCES_DIR}/scripts/packer/packer-resources"
    def WUM_HOME = "/var/lib/jenkins/.wum3/products"
    //Config Files
    def ENV = '/home/jenkins/jenkins_env'
    def PUPPET_CONF = "${WORKSPACE}/${PIPELINE_RESOURCES_DIR}/scripts/puppet/apply-config.sh"
    def PROD_CF = "${WORKSPACE}/${DEPLOYMENT_DIR}/cf.yaml"
    def STAGING_CF = "${WORKSPACE}/${DEPLOYMENT_DIR}/cf-staging.yaml"
    def PACKER_MANIFEST = "${WORKSPACE}/${PIPELINE_RESOURCES_DIR}/scripts/packer/manifest.json"
    def PACKER_JSON = "${WORKSPACE}/${PIPELINE_RESOURCES_DIR}/scripts/packer/packer.json"
    def AWS_CREDS_LOC = '/home/ubuntu/.aws/credentials'
    //repos
    def GIT_REPO_RESOURCES = 'https://github.com/rasanjaya85/jenkins-pipeline-artifacts'
    //mvn remove download logs
    def REMOVE_LOGS = 'org.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'

    try {
        stage(Constants.Stages.SETUP_ENV) {
            log.info "Setting up the Environment"
            file = load ENV
            env.REGION = getAvailabilityZone()
            cloneRepoToDir env.GIT_REPO_ARTIFACTS, ARTIFACTS_DIR
            cloneRepoToDir "$GIT_REPO_RESOURCES", PIPELINE_RESOURCES_DIR
            cloneRepoToDir env.GIT_REPO_CF, DEPLOYMENT_DIR
            cloneRepoToDir env.GIT_REPO_PUPPET, PUPPET_CONF_DIR
            if (!fileExists("${IMAGE_RESOURCES}")) {
                sh "mkdir $IMAGE_RESOURCES"
            }
            copy([src: "${RESOURCES}/*", dest: "${IMAGE_RESOURCES_LOC}"])
            copy([src: "${PACKER_RESOURCES}/*", dest: "${IMAGE_RESOURCES_LOC}"])
        }

         stage(Constants.Stages.BUILD_PACK) {
            log.info "Generate Pack with configs"
            applyConfig([product       : "$params.PRODUCT",
                         version       : "$params.VERSION",
                         wum_creds     : "${WUM_CREDS}",
                         puppetManifest: "${PUPPET_CONF}",
                         artifactsLoc  : "${ARTIFACT_LOC}",
                         zipLoc        : "${IMAGE_RESOURCES_LOC}",
                         wumHome       : "${WUM_HOME}",
                         puppetConfLoc : "${PUPPET_CONF_DIR}"])
        }

        stage(Constants.Stages.BUILD_IMAGE) {
            log.info "Generate AMI"
            env.IMAGE_ID = buildImage([product       : "$params.PRODUCT",
                                       version       : "$params.VERSION",
                                       region        : "${REGION}",
                                       packerJson    : "${PACKER_JSON}",
                                       image         : "${BASE_IMAGE}",
                                       packerManifest: "${PACKER_MANIFEST}",
                                       awsCredsFile  : "${AWS_CREDS_LOC}",
                                       imageResources: "${IMAGE_RESOURCES_LOC}"])
        }

    } catch (exc) {
        log.err "Caught: ${exc}"
        String recipient = env.Email
        mail subject: "${env.JOB_NAME} (${env.BUILD_NUMBER}) failed",
                body: "It appears that ${env.BUILD_URL} is failing, somebody should do something about that",
                to: recipient,
                replyTo: recipient,
                from: 'noreply@cicd.wso2'
        throw exc
    }

}
